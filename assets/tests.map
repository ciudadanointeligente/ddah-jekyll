{"version":3,"sources":["ddah-ember/tests/acceptance/404-test.js","ddah-ember/tests/acceptance/404-test.jshint.js","ddah-ember/tests/acceptance/government-test.js","ddah-ember/tests/acceptance/government-test.jshint.js","ddah-ember/tests/acceptance/study-test.js","ddah-ember/tests/acceptance/study-test.jshint.js","ddah-ember/tests/adapters/government.jshint.js","ddah-ember/tests/app.jshint.js","ddah-ember/tests/controllers/compare-studies.jshint.js","ddah-ember/tests/controllers/study.jshint.js","ddah-ember/tests/helpers/coherence-per-area.jshint.js","ddah-ember/tests/helpers/destroy-app.js","ddah-ember/tests/helpers/destroy-app.jshint.js","ddah-ember/tests/helpers/fullfilmentPerArea.jshint.js","ddah-ember/tests/helpers/module-for-acceptance.js","ddah-ember/tests/helpers/module-for-acceptance.jshint.js","ddah-ember/tests/helpers/resolver.js","ddah-ember/tests/helpers/resolver.jshint.js","ddah-ember/tests/helpers/start-app.js","ddah-ember/tests/helpers/start-app.jshint.js","ddah-ember/tests/mixins/calculations.jshint.js","ddah-ember/tests/mixins/csv-parser.jshint.js","ddah-ember/tests/mixins/utilities.jshint.js","ddah-ember/tests/models/area.jshint.js","ddah-ember/tests/models/bill.jshint.js","ddah-ember/tests/models/government.jshint.js","ddah-ember/tests/models/justification.jshint.js","ddah-ember/tests/models/phase.jshint.js","ddah-ember/tests/models/priority.jshint.js","ddah-ember/tests/models/promise.jshint.js","ddah-ember/tests/models/study.jshint.js","ddah-ember/tests/resolver.jshint.js","ddah-ember/tests/router.jshint.js","ddah-ember/tests/routes/404.jshint.js","ddah-ember/tests/routes/about.jshint.js","ddah-ember/tests/routes/application.jshint.js","ddah-ember/tests/routes/compare-studies.jshint.js","ddah-ember/tests/routes/government.jshint.js","ddah-ember/tests/routes/index.jshint.js","ddah-ember/tests/routes/methodology.jshint.js","ddah-ember/tests/routes/study.jshint.js","ddah-ember/tests/test-helper.js","ddah-ember/tests/test-helper.jshint.js","ddah-ember/tests/unit/helpers/coherence-per-area-test.js","ddah-ember/tests/unit/helpers/coherence-per-area-test.jshint.js","ddah-ember/tests/unit/mixins/calculations-test.js","ddah-ember/tests/unit/mixins/calculations-test.jshint.js","ddah-ember/tests/unit/mixins/utilities-test.js","ddah-ember/tests/unit/mixins/utilities-test.jshint.js","ddah-ember/tests/unit/models/area-test.js","ddah-ember/tests/unit/models/area-test.jshint.js","ddah-ember/tests/unit/models/bill-test.js","ddah-ember/tests/unit/models/bill-test.jshint.js","ddah-ember/tests/unit/models/government-test.js","ddah-ember/tests/unit/models/government-test.jshint.js","ddah-ember/tests/unit/models/justification-test.js","ddah-ember/tests/unit/models/justification-test.jshint.js","ddah-ember/tests/unit/models/phase-test.js","ddah-ember/tests/unit/models/phase-test.jshint.js","ddah-ember/tests/unit/models/priority-test.js","ddah-ember/tests/unit/models/priority-test.jshint.js","ddah-ember/tests/unit/models/promise-test.js","ddah-ember/tests/unit/models/promise-test.jshint.js","ddah-ember/tests/unit/models/study-test.js","ddah-ember/tests/unit/models/study-test.jshint.js","ddah-ember/tests/unit/routes/about-test.js","ddah-ember/tests/unit/routes/about-test.jshint.js","ddah-ember/tests/unit/routes/application-test.js","ddah-ember/tests/unit/routes/application-test.jshint.js","ddah-ember/tests/unit/routes/compare-studies-test.js","ddah-ember/tests/unit/routes/compare-studies-test.jshint.js","ddah-ember/tests/unit/routes/government-test.js","ddah-ember/tests/unit/routes/government-test.jshint.js","ddah-ember/tests/unit/routes/index-test.js","ddah-ember/tests/unit/routes/index-test.jshint.js","ddah-ember/tests/unit/routes/methodology-test.js","ddah-ember/tests/unit/routes/methodology-test.jshint.js","ddah-ember/tests/unit/routes/study-test.js","ddah-ember/tests/unit/routes/study-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('ddah-ember/tests/acceptance/404-test', ['exports', 'qunit', 'ddah-ember/tests/helpers/module-for-acceptance'], function (exports, _qunit, _ddahEmberTestsHelpersModuleForAcceptance) {\n\n  (0, _ddahEmberTestsHelpersModuleForAcceptance['default'])('Acceptance | 404');\n\n  (0, _qunit.test)('visiting /404', function (assert) {\n    visit('/404');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/404');\n      assert.ok(find('.not-found').length);\n    });\n  });\n});","define('ddah-ember/tests/acceptance/404-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | acceptance/404-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/404-test.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/acceptance/government-test', ['exports', 'qunit', 'ddah-ember/tests/helpers/module-for-acceptance'], function (exports, _qunit, _ddahEmberTestsHelpersModuleForAcceptance) {\n\n  (0, _ddahEmberTestsHelpersModuleForAcceptance['default'])('Acceptance | government');\n\n  (0, _qunit.test)('visiting /government', function (assert) {\n    visit('/government');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/government');\n      assert.equal(find('.govs').length, 1);\n    });\n  });\n});","define('ddah-ember/tests/acceptance/government-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | acceptance/government-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/government-test.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/acceptance/study-test', ['exports', 'qunit', 'ddah-ember/tests/helpers/module-for-acceptance'], function (exports, _qunit, _ddahEmberTestsHelpersModuleForAcceptance) {\n\n  (0, _ddahEmberTestsHelpersModuleForAcceptance['default'])('Acceptance | study');\n\n  (0, _qunit.test)('visting a study that does\\'n exist', function (assert) {\n    visit('study/gatito');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/404');\n    });\n  });\n\n  (0, _qunit.test)('visiting a valid study', function (assert) {\n    visit(\"/study/bachelet-2014-2018_marzo-2016\");\n\n    andThen(function () {\n      assert.equal(currentURL(), '/study/bachelet-2014-2018_marzo-2016');\n    });\n  });\n});","define('ddah-ember/tests/acceptance/study-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | acceptance/study-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/study-test.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/adapters/government.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/government.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/government.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/controllers/compare-studies.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/compare-studies.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/compare-studies.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/controllers/study.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/study.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/study.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/helpers/coherence-per-area.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/coherence-per-area.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/coherence-per-area.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('ddah-ember/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/helpers/fullfilmentPerArea.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/fullfilmentPerArea.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/fullfilmentPerArea.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'ddah-ember/tests/helpers/start-app', 'ddah-ember/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _ddahEmberTestsHelpersStartApp, _ddahEmberTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _ddahEmberTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _ddahEmberTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('ddah-ember/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/helpers/resolver', ['exports', 'ddah-ember/resolver', 'ddah-ember/config/environment'], function (exports, _ddahEmberResolver, _ddahEmberConfigEnvironment) {\n\n  var resolver = _ddahEmberResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _ddahEmberConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _ddahEmberConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('ddah-ember/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/helpers/start-app', ['exports', 'ember', 'ddah-ember/app', 'ddah-ember/config/environment'], function (exports, _ember, _ddahEmberApp, _ddahEmberConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _ddahEmberConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _ddahEmberApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('ddah-ember/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/mixins/calculations.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | mixins/calculations.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/calculations.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/mixins/csv-parser.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | mixins/csv-parser.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/csv-parser.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/mixins/utilities.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | mixins/utilities.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/utilities.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/models/area.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/area.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/area.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/models/bill.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/bill.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/bill.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/models/government.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/government.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/government.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/models/justification.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/justification.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/justification.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/models/phase.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/phase.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/phase.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/models/priority.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/priority.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/priority.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/models/promise.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/promise.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/promise.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/models/study.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/study.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/study.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/routes/404.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/404.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/404.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/routes/about.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/about.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/about.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/routes/compare-studies.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/compare-studies.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/compare-studies.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/routes/government.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/government.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/government.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/routes/methodology.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/methodology.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/methodology.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/routes/study.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/study.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/study.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/test-helper', ['exports', 'ddah-ember/tests/helpers/resolver', 'ember-qunit'], function (exports, _ddahEmberTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_ddahEmberTestsHelpersResolver['default']);\n});","define('ddah-ember/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define(\"ddah-ember/tests/unit/helpers/coherence-per-area-test\", [\"exports\"], function (exports) {});\n\n// import { coherencePerArea } from 'ddah-ember/helpers/coherence-per-area';\n// import { module, test } from 'qunit';\n\n// module('Unit | Helper | coherence per area');\n\n// Replace this with your real tests.\n// test('it works', function(assert) {\n//   let result = coherencePerArea([42]);\n//   assert.ok(result);\n// });","define('ddah-ember/tests/unit/helpers/coherence-per-area-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/coherence-per-area-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/coherence-per-area-test.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/unit/mixins/calculations-test', ['exports', 'ember', 'ddah-ember/mixins/calculations', 'qunit'], function (exports, _ember, _ddahEmberMixinsCalculations, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | calculations', {\n    needs: ['model:promise', 'model:area', 'model:study', 'model:government', 'model:bill', 'model:phase', 'model:priority']\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var CalculationsObject = _ember['default'].Object.extend(_ddahEmberMixinsCalculations['default']);\n    var subject = CalculationsObject.create();\n    assert.ok(subject);\n  });\n});","define('ddah-ember/tests/unit/mixins/calculations-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/mixins/calculations-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/calculations-test.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/unit/mixins/utilities-test', ['exports', 'ember', 'ddah-ember/mixins/utilities', 'qunit'], function (exports, _ember, _ddahEmberMixinsUtilities, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | utilities');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var UtilitiesObject = _ember['default'].Object.extend(_ddahEmberMixinsUtilities['default']);\n    var subject = UtilitiesObject.create();\n\n    assert.ok(subject);\n    assert.ok(subject._hashCode('Perrito'));\n  });\n});","define('ddah-ember/tests/unit/mixins/utilities-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/mixins/utilities-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/utilities-test.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/unit/models/area-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n\n  (0, _emberQunit.moduleForModel)('area', 'Unit | Model | area', {\n    // Specify the other units that are required for this test.\n    needs: ['model:promise', 'model:area', 'model:study', 'model:government', 'model:bill', 'model:phase', 'model:priority', 'model:justification'],\n    loadData: function loadData() {\n      _ember['default'].run.begin();\n      // Having two areas\n      var area1 = this.subject({ 'id': \"1111111111\", 'name': 'nombre1' });\n      var area2 = this.store().createRecord('area', { 'id': \"2222222222\", 'name': 'nombre2' });\n\n      // First Government\n      var gov1 = this.store().createRecord('government', { 'name': 'Bachelet-2014-2018' });\n      var study1 = this.store().createRecord('study', { 'version': 'marzo', 'year': '2016' });\n      gov1.get('studies').pushObject(study1);\n      var promesa_1 = this.store().createRecord('promise', { 'content': 'content01',\n        'number': '1',\n        'title': 'title01',\n        'study': study1, 'coherenceLevel': 4,\n        'area': area1 });\n      var promesa_2 = this.store().createRecord('promise', { 'content': 'content02',\n        'number': '2',\n        'title': 'title02',\n        'study': study1, 'coherenceLevel': 1,\n        'area': area1 });\n      var bill_a = this.store().createRecord('bill', { 'name': 'name_a',\n        'id': 'ba',\n        'title': 'title01',\n        'fullfilment': '100%'\n\n      });\n      this.store().createRecord('justification', { 'promise': promesa_1, 'bill': bill_a });\n      var bill_b = this.store().createRecord('bill', { 'name': 'name_b',\n        'id': 'bb',\n        'title': 'title02',\n        'fullfilment': '0%' });\n      this.store().createRecord('justification', { 'promise': promesa_2, 'bill': bill_b });\n\n      var promesa_11 = this.store().createRecord('promise', { 'content': 'content01',\n        'number': '1',\n        'title': 'title01',\n        'study': study1,\n        'coherenceLevel': 1,\n        'area': area2 });\n      var promesa_21 = this.store().createRecord('promise', { 'content': 'content02',\n        'number': '2',\n        'title': 'title02',\n        'coherenceLevel': 3,\n        'study': study1,\n        'area': area2 });\n\n      var bill1 = this.store().createRecord('bill', { 'name': 'name01',\n        'id': 'b1',\n        'title': 'title01',\n        'fullfilment': '25%'\n      });\n      this.store().createRecord('justification', { 'promise': promesa_11, 'bill': bill1 });\n      var bill2 = this.store().createRecord('bill', { 'name': 'name02',\n        'id': 'b2',\n        'title': 'title02',\n        'fullfilment': '25%' });\n      this.store().createRecord('justification', { 'promise': promesa_21, 'bill': bill2 });\n\n      var gov2 = this.store().createRecord('government', { 'name': 'Piñera-2011-2014' });\n\n      var study2 = this.store().createRecord('study', { 'version': 'marzo',\n        'year': '2013',\n        'government': gov2\n      });\n\n      var promesa_3 = this.store().createRecord('promise', { 'content': 'content01',\n        'number': '1',\n        'title': 'title01',\n        'study': study2,\n        'coherenceLevel': 4,\n        'area': area1 });\n      var promesa_4 = this.store().createRecord('promise', { 'content': 'content02',\n        'number': '2',\n        'title': 'title02',\n        'coherenceLevel': 3,\n        'study': study2,\n        'area': area1 });\n\n      var bill3 = this.store().createRecord('bill', { 'name': 'name03',\n        'id': 'b3',\n        'title': 'title01',\n        'fullfilment': '100%' });\n      this.store().createRecord('justification', { 'promise': promesa_3, 'bill': bill3 });\n      var bill4 = this.store().createRecord('bill', { 'name': 'name04',\n        'id': 'b4',\n        'title': 'title02',\n        'fullfilment': '100%' });\n      this.store().createRecord('justification', { 'promise': promesa_3, 'bill': bill4 });\n      var bill5 = this.store().createRecord('bill', { 'name': 'name05',\n        'id': 'b5',\n        'title': 'title04',\n        'fullfilment': '100%' });\n      this.store().createRecord('justification', { 'promise': promesa_4, 'bill': bill5 });\n      var bill6 = this.store().createRecord('bill', { 'name': 'name06',\n        'id': 'b6',\n        'title': 'title05',\n        'fullfilment': '10%' });\n      this.store().createRecord('justification', { 'promise': promesa_4, 'bill': bill6 });\n\n      _ember['default'].run.end();\n      return { \"area1\": area1,\n        \"area2\": area2,\n        \"study1\": study1,\n        \"study2\": study2 };\n    }\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n\n  (0, _emberQunit.test)('tiene nombre entre sus atributos', function (assert) {\n    var ar = this.subject({ 'name': 'nombre' });\n    assert.equal(ar.toJSON().name, 'nombre');\n  });\n\n  (0, _emberQunit.test)(\"area has many promises\", function (assert) {\n    var area = this.store().modelFor('area');\n    var relationship = _ember['default'].get(area, 'relationshipsByName').get('promises');\n    assert.equal(relationship.key, 'promises');\n    assert.equal(relationship.kind, 'hasMany');\n  });\n\n  (0, _emberQunit.test)('area getFulfillment by study', function (assert) {\n\n    var data = this.loadData();\n\n    assert.equal(data.area1.fullfilmentPerStudy(data.study1), 50);\n    assert.equal(data.area2.fullfilmentPerStudy(data.study1), 25);\n    assert.equal(data.area1.fullfilmentPerStudy(data.study2), 78);\n    assert.equal(data.area2.fullfilmentPerStudy(data.study2), 0);\n  });\n\n  (0, _emberQunit.test)('getCapacity', function (assert) {\n    var data = this.loadData();\n    assert.equal(data.area1.capacityByStudy(data.study1), 1);\n  });\n\n  (0, _emberQunit.test)('area getCoherenceLevelByStudy', function (assert) {\n\n    var data = this.loadData();\n\n    assert.equal(data.area1.coherenceLevelByStudy(data.study1), 2.5, 'a');\n    assert.equal(data.area2.coherenceLevelByStudy(data.study1), 2, 'b');\n    assert.equal(data.area1.coherenceLevelByStudy(data.study2), 3.5, 'c');\n    assert.equal(data.area2.coherenceLevelByStudy(data.study2), 1, 'd');\n  });\n\n  (0, _emberQunit.test)('area getCompletedPromisesByStudy', function (assert) {\n\n    var data = this.loadData();\n\n    assert.equal(data.area1.getCompletedPromisesByStudy(data.study1), 1);\n    assert.equal(data.area2.getCompletedPromisesByStudy(data.study1), 0);\n    assert.equal(data.area1.getCompletedPromisesByStudy(data.study2), 1);\n    assert.equal(data.area2.getCompletedPromisesByStudy(data.study2), 0);\n  });\n  (0, _emberQunit.test)(\"it calculates things of bills\", function (assert) {\n    _ember['default'].run.begin();\n    var promesa_1 = this.store().createRecord('promise', { 'content': 'content01',\n      'number': '1',\n      'coherenceLevel': 4,\n      'title': 'title01' });\n    var promesa_2 = this.store().createRecord('promise', { 'content': 'content02',\n      'number': '2',\n      'coherenceLevel': 1,\n      'title': 'title02' });\n    var b1 = this.store().createRecord('bill', { 'name': 'name01',\n      'title': 'title01',\n      'fullfilment': '100%'\n    });\n    this.store().createRecord('justification', { 'promise': promesa_1, 'bill': b1 });\n    var b2 = this.store().createRecord('bill', { 'name': 'name02',\n      'title': 'title02',\n      'fullfilment': '0%'\n    });\n    this.store().createRecord('justification', { 'promise': promesa_2, 'bill': b2 });\n    _ember['default'].run.end();\n    var result_coherence = this.subject().getAverageFrom([promesa_1, promesa_2], 'coherenceLevel');\n    assert.equal(result_coherence, 2.5);\n    var result_fullfilment = this.subject().getAverageFrom([promesa_1, promesa_2], 'fullfilment');\n    assert.equal(result_fullfilment, 50);\n  });\n});","define('ddah-ember/tests/unit/models/area-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/area-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/area-test.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/unit/models/bill-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n\n  (0, _emberQunit.moduleForModel)('bill', 'Unit | Model | bill', {\n    // Specify the other units that are required for this test.\n    needs: ['model:phase', 'model:promise', 'model:priority', 'model:justification']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n\n  (0, _emberQunit.test)('it has attribute', function (assert) {\n    var test = this.subject({ 'name': '7543-12',\n      'title': 'Reforma al Código de aguas',\n      'url': 'www.congresoabierto.cl/proyectos/7543-12',\n      'justification': 'El proyecto contempla que se permita a la admin. limitar el ejrcicio de los dd de los aprovechamiento',\n      'fullfilment': 40 });\n    assert.equal(test.get('name'), '7543-12');\n    assert.equal(test.get('title'), 'Reforma al Código de aguas');\n    assert.equal(test.get('url'), 'www.congresoabierto.cl/proyectos/7543-12');\n    assert.equal(test.get('justification'), 'El proyecto contempla que se permita a la admin. limitar el ejrcicio de los dd de los aprovechamiento');\n    assert.equal(test.get('fullfilment'), 40);\n  });\n\n  (0, _emberQunit.test)(\"bill belongs to phase\", function (assert) {\n    var bill = this.store().modelFor('bill');\n    var relationship = _ember['default'].get(bill, 'relationshipsByName').get('phase');\n    assert.equal(relationship.key, 'phase');\n    assert.equal(relationship.kind, 'belongsTo');\n  });\n\n  (0, _emberQunit.test)(\"bill has many priorities\", function (assert) {\n    var bill = this.store().modelFor('bill');\n    var relationship = _ember['default'].get(bill, 'relationshipsByName').get('priorities');\n    assert.equal(relationship.key, 'priorities');\n    assert.equal(relationship.kind, 'hasMany');\n  });\n\n  (0, _emberQunit.test)(\"bill belongs to promise\", function (assert) {\n    var bill = this.store().modelFor('bill');\n    var relationship = _ember['default'].get(bill, 'relationshipsByName').get('justifications');\n    assert.equal(relationship.key, 'justifications');\n    assert.equal(relationship.kind, 'hasMany');\n  });\n\n  // test(\"preloading some data\", function(assert){\n  //     let the_bills = this.store().peekAll('bill');\n  //     let arr = the_bills.toArray();\n  //     assert.ok(arr.length > 0);\n  // });\n});","define('ddah-ember/tests/unit/models/bill-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/bill-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/bill-test.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/unit/models/government-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n\n  (0, _emberQunit.moduleForModel)('government', 'Unit | Model | government', {\n    // Specify the other units that are required for this test.\n    needs: ['model:study']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n\n  (0, _emberQunit.test)('it has attributes', function (assert) {\n    var government = this.subject({ 'name': 'Bachelet 2014-2018' });\n    assert.equal(government.get('name'), 'Bachelet 2014-2018');\n    assert.ok(_ember['default'].guidFor(government));\n  });\n\n  (0, _emberQunit.test)(\"gov has many studies\", function (assert) {\n    var government = this.store().modelFor('government');\n    var relationship = _ember['default'].get(government, 'relationshipsByName').get('studies');\n    assert.equal(relationship.key, 'studies');\n    assert.equal(relationship.kind, 'hasMany');\n  });\n});","define('ddah-ember/tests/unit/models/government-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/government-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/government-test.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/unit/models/justification-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n\n  (0, _emberQunit.moduleForModel)('justification', 'Unit | Model | justification', {\n    // Specify the other units that are required for this test.\n    needs: ['model:promise', 'model:area', 'model:study', 'model:government', 'model:bill', 'model:phase', 'model:priority'],\n    loadData: function loadData() {\n      _ember['default'].run.begin();\n      var promise = this.store().createRecord('promise', { 'content': 'content01',\n        'number': '1',\n        'title': 'title01' });\n      var bill = this.store().createRecord('bill', { 'name': 'name01',\n        'title': 'title01',\n        'fullfilment': '100%',\n        'coherenceLevel': 4\n      });\n      _ember['default'].run.end();\n      return { 'bill': bill, 'promise': promise };\n    }\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n\n  (0, _emberQunit.test)('attributes', function (assert) {\n    this.loadData();\n    var model = this.subject({ 'justification': 'este bill pertenece a esta propuesta' });\n    var json = model.toJSON();\n    assert.equal(json.justification, 'este bill pertenece a esta propuesta');\n\n    var justification = this.store().modelFor('justification');\n    var relationship = _ember['default'].get(justification, 'relationshipsByName').get('promise');\n    assert.equal(relationship.key, 'promise');\n    assert.equal(relationship.kind, 'belongsTo');\n    relationship = _ember['default'].get(justification, 'relationshipsByName').get('bill');\n    assert.equal(relationship.key, 'bill');\n    assert.equal(relationship.kind, 'belongsTo');\n  });\n});","define('ddah-ember/tests/unit/models/justification-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/justification-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/justification-test.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/unit/models/phase-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n\n  (0, _emberQunit.moduleForModel)('phase', 'Unit | Model | phase', {\n    // Specify the other units that are required for this test.\n    needs: ['model:bill', 'model:justification']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n\n  (0, _emberQunit.test)('attributes', function (assert) {\n    var phase = this.subject({ 'name': \"Primer trámite constitucional\", \"fullfilment\": 1 / 3 });\n    assert.equal(phase.get('name'), \"Primer trámite constitucional\");\n    assert.equal(phase.get(\"fullfilment\"), 1 / 3);\n  });\n\n  (0, _emberQunit.test)(\"phase has many bills\", function (assert) {\n    var phase = this.store().modelFor('phase');\n    var relationship = _ember['default'].get(phase, 'relationshipsByName').get('bills');\n    assert.equal(relationship.key, 'bills');\n    assert.equal(relationship.kind, 'hasMany');\n  });\n});","define('ddah-ember/tests/unit/models/phase-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/phase-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/phase-test.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/unit/models/priority-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n\n  (0, _emberQunit.moduleForModel)('priority', 'Unit | Model | priority', {\n    // Specify the other units that are required for this test.\n    needs: ['model:bill', 'model:justification']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    assert.ok(!!model);\n  });\n\n  (0, _emberQunit.test)('it has attributes', function (assert) {\n    var priority = this.subject({ 'name': 'simple' });\n    assert.equal(priority.toJSON().name, 'simple');\n    assert.equal(priority.toJSON().count, 0);\n  });\n\n  (0, _emberQunit.test)(\"priority belongs to bill\", function (assert) {\n    var priority = this.store().modelFor('priority');\n    var relationship = _ember['default'].get(priority, 'relationshipsByName').get('bill');\n    assert.equal(relationship.key, 'bill');\n    assert.equal(relationship.kind, 'belongsTo');\n  });\n});","define('ddah-ember/tests/unit/models/priority-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/priority-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/priority-test.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/unit/models/promise-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n\n  (0, _emberQunit.moduleForModel)('promise', 'Unit | Model | promise', {\n    // Specify the other units that are required for this test.\n    needs: ['model:bill', 'model:study', 'model:area', 'model:phase', 'model:priority', 'model:justification']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n\n  (0, _emberQunit.test)('it has attributes', function (assert) {\n    var promise = this.subject({ 'content': \"I'm a content\" });\n    assert.equal(promise.get('content'), \"I'm a content\");\n    assert.ok(_ember['default'].guidFor(promise));\n  });\n\n  (0, _emberQunit.test)(\"promise has many bills\", function (assert) {\n    var promise = this.store().modelFor('promise');\n    var relationship = _ember['default'].get(promise, 'relationshipsByName').get('justifications');\n    assert.equal(relationship.key, 'justifications');\n    assert.equal(relationship.kind, 'hasMany');\n  });\n\n  (0, _emberQunit.test)(\"promise belongs to study\", function (assert) {\n    var promise = this.store().modelFor('promise');\n    var relationship = _ember['default'].get(promise, 'relationshipsByName').get('study');\n    assert.equal(relationship.key, 'study');\n    assert.equal(relationship.kind, 'belongsTo');\n  });\n\n  (0, _emberQunit.test)(\"promise belongs to area\", function (assert) {\n    var promise = this.store().modelFor('promise');\n    var relationship = _ember['default'].get(promise, 'relationshipsByName').get('area');\n    assert.equal(relationship.key, 'area');\n    assert.equal(relationship.kind, 'belongsTo');\n  });\n\n  (0, _emberQunit.test)('promise completed', function (assert) {\n    _ember['default'].run.begin();\n    var pl1 = this.store().createRecord('bill', { 'name': 'name01',\n      'title': 'title01',\n      'fullfilment': '100%',\n      'coherence': 4\n    });\n    var pl2 = this.store().createRecord('bill', { 'name': 'name02',\n      'title': 'title02',\n      'fullfilment': '100%',\n      'coherence': 1 });\n    var promise = this.subject({ 'content': \"I'm a content\", 'bills': [pl1, pl2] });\n\n    _ember['default'].run.end();\n    assert.ok(promise.get('is_completed'));\n  });\n});","define('ddah-ember/tests/unit/models/promise-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/promise-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/promise-test.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/unit/models/study-test', ['exports', 'ember-qunit', 'ember', 'lodash'], function (exports, _emberQunit, _ember, _lodash) {\n\n  (0, _emberQunit.moduleForModel)('study', 'Unit | Model | study (perrito)', {\n    // Specify the other units that are required for this test.\n    needs: ['model:government', 'model:promise', 'model:area', 'model:bill', 'model:phase', 'model:priority', 'model:justification'],\n    loadData: function loadData(store) {\n      _ember['default'].run.begin();\n\n      var gov = store.createRecord('government', { 'name': 'Bachelet-2014-2018' });\n      var estudio = store.createRecord('study', { \"version\": \"marzo\", \"year\": \"2016\", \"government\": gov });\n\n      var area_1 = store.createRecord('area', { 'id': 'a1', 'name': 'area 01' });\n      var area_2 = store.createRecord('area', { 'id': 'a2', 'name': 'area 02' });\n\n      var pl1 = store.createRecord('bill', { 'id': 'pl1', 'name': 'name01', 'title': 'title01', 'fullfilment': '100%' });\n      store.createRecord('priority', { 'name': 'simple', 'count': 10, 'bill': pl1 });\n      store.createRecord('priority', { 'name': 'suma', 'count': 11, 'bill': pl1 });\n      store.createRecord('priority', { 'name': 'inmediata', 'count': 12, 'bill': pl1 });\n      var pl2 = store.createRecord('bill', { 'id': 'pl2', 'name': 'name02', 'title': 'title02', 'fullfilment': '40%' });\n      store.createRecord('priority', { 'name': 'simple', 'count': 10, 'bill': pl2 });\n      store.createRecord('priority', { 'name': 'suma', 'count': 11, 'bill': pl2 });\n      store.createRecord('priority', { 'name': 'inmediata', 'count': 12, 'bill': pl2 });\n      var pl3 = store.createRecord('bill', { 'id': 'pl3', 'name': 'name03', 'title': 'title03', 'fullfilment': '100%' });\n      store.createRecord('priority', { 'name': 'simple', 'count': 11, 'bill': pl3 });\n      store.createRecord('priority', { 'name': 'suma', 'count': 11, 'bill': pl3 });\n      store.createRecord('priority', { 'name': 'inmediata', 'count': 12, 'bill': pl3 });\n      var pl4 = store.createRecord('bill', { 'id': 'pl4', 'name': 'name04', 'title': 'title04', 'fullfilment': '0%' });\n      store.createRecord('promise', { 'content': 'content01',\n        'id': 1,\n        'number': '1',\n        'title': 'title01',\n        'study': estudio,\n        'bills': [pl1, pl3],\n        'area': area_1,\n        'coherenceLevel': 3\n      }); //Promesa completada\n      store.createRecord('promise', { 'content': 'content02',\n        'id': 2,\n        'number': '2',\n        'title': 'title02',\n        'study': estudio,\n        'bills': [pl2, pl4],\n        'coherenceLevel': 4,\n        'area': area_1 }); //Promesa no completada\n      store.createRecord('promise', { 'content': 'content03',\n        'id': 3,\n        'number': '3',\n        'title': 'title03',\n        'study': estudio,\n        'bills': [pl3], 'coherenceLevel': 4,\n        'area': area_2 }); //promesa completada\n      var estudio2 = store.createRecord('study', { \"version\": \"marzo\", \"year\": \"2017\", \"government\": gov });\n\n      var pl5 = store.createRecord('bill', { 'id': 'pl5', 'name': 'name05', 'title': 'title05', 'fullfilment': '0%' });\n      var pl6 = store.createRecord('bill', { 'id': 'pl6', 'name': 'name06', 'title': 'title06', 'fullfilment': '0%' });\n\n      store.createRecord('promise', { 'content': 'content04',\n        'id': 4,\n        'number': '4',\n        'title': 'title04',\n        'study': estudio2,\n        'area': area_2, 'coherenceLevel': 1,\n        'bills': [pl5, pl6]\n      });\n      store.createRecord('promise', { 'content': 'content05',\n        'id': 5,\n        'number': '5',\n        'title': 'title05',\n        'study': estudio2,\n        'bills': [pl5], 'coherenceLevel': 1,\n        'area': area_2\n      });\n      store.createRecord('promise', { 'content': 'content06',\n        'id': 6,\n        'number': '6',\n        'title': 'title06',\n        'study': estudio2,\n        'area': area_1 });\n      _ember['default'].run.end();\n      return { 'estudio': estudio, 'estudio2': estudio2, 'areas': [area_1, area_2] };\n    }\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n\n  (0, _emberQunit.test)('it has attributes', function (assert) {\n    var estudio = this.subject({ 'version': 'marzo', 'year': '2016' });\n    assert.equal(estudio.get('version'), 'marzo');\n    assert.equal(estudio.get('year'), 2016);\n  });\n\n  (0, _emberQunit.test)(\"study has many promises\", function (assert) {\n    var study = this.store().modelFor('study');\n    var relationship = _ember['default'].get(study, 'relationshipsByName').get('promises');\n    assert.equal(relationship.key, 'promises');\n    assert.equal(relationship.kind, 'hasMany');\n  });\n\n  (0, _emberQunit.test)(\"study belongs to government\", function (assert) {\n    var study = this.store().modelFor('study');\n    var relationship = _ember['default'].get(study, 'relationshipsByName').get('government');\n    assert.equal(relationship.key, 'government');\n    assert.equal(relationship.kind, 'belongsTo');\n  });\n\n  (0, _emberQunit.test)(\"study has slug attribute\", function (assert) {\n    _ember['default'].run.begin();\n    var gov = this.store().createRecord('government', { 'name': 'Bachelet-2014-2018' });\n    var estudio = this.subject({ 'version': 'marzo', 'year': '2016' });\n    gov.get('studies').pushObject(estudio);\n    assert.equal(estudio.get('slug'), 'bachelet-2014-2018_marzo-2016');\n    _ember['default'].run.end();\n  });\n\n  (0, _emberQunit.test)(\"study has an attr presentanAvance\", function (assert) {\n    var estudio = this.subject({ 'presentanAvance': 10 });\n    assert.equal(estudio.get('presentanAvance'), 10);\n  });\n\n  (0, _emberQunit.test)(\"study return nro of finalizadas\", function (assert) {\n    _ember['default'].run.begin();\n\n    var gov = this.store().createRecord('government', { 'name': 'Bachelet-2014-2018' });\n    var estudio = this.store().createRecord('study', { \"version\": \"marzo\", \"year\": \"2016\" });\n\n    gov.get('studies').pushObject(estudio);\n    var promesa_1 = this.store().createRecord('promise', { 'content': 'content01', 'number': '1', 'title': 'title01' });\n    var promesa_2 = this.store().createRecord('promise', { 'content': 'content02', 'number': '2', 'title': 'title02' });\n    var pl1 = this.store().createRecord('bill', { 'name': 'name01', 'title': 'title01', 'fullfilment': '100%' });\n    var pl2 = this.store().createRecord('bill', { 'name': 'name02', 'title': 'title02', 'fullfilment': '0%' });\n    promesa_1.get('bills').pushObject(pl1);\n    promesa_2.get('bills').pushObject(pl2);\n\n    estudio.get('promises').pushObject(promesa_1);\n    estudio.get('promises').pushObject(promesa_2);\n\n    assert.equal(estudio.get('finalizadas'), 1);\n    _ember['default'].run.end();\n  });\n\n  (0, _emberQunit.test)(\"study return nro of en desarrollo\", function (assert) {\n    _ember['default'].run.begin();\n\n    var gov = this.store().createRecord('government', { 'name': 'Bachelet-2014-2018' });\n    var estudio = this.store().createRecord('study', { \"version\": \"marzo\", \"year\": \"2016\" });\n\n    gov.get('studies').pushObject(estudio);\n    var promesa_1 = this.store().createRecord('promise', { 'content': 'content01', 'number': '1', 'title': 'title01' });\n    var promesa_2 = this.store().createRecord('promise', { 'content': 'content02', 'number': '2', 'title': 'title02' });\n    var promesa_3 = this.store().createRecord('promise', { 'content': 'content03', 'number': '3', 'title': 'title03' });\n    var pl1 = this.store().createRecord('bill', { 'name': 'name01', 'title': 'title01', 'fullfilment': '100%' });\n    var pl2 = this.store().createRecord('bill', { 'name': 'name02', 'title': 'title02', 'fullfilment': '40%' });\n    var pl3 = this.store().createRecord('bill', { 'name': 'name03', 'title': 'title03', 'fullfilment': '70%' });\n    promesa_1.get('bills').pushObject(pl1);\n    promesa_2.get('bills').pushObject(pl2);\n    promesa_3.get('bills').pushObject(pl3);\n\n    estudio.get('promises').pushObject(promesa_1);\n    estudio.get('promises').pushObject(promesa_2);\n    estudio.get('promises').pushObject(promesa_3);\n\n    assert.equal(estudio.get('enDesarrollo'), 2);\n    _ember['default'].run.end();\n  });\n\n  (0, _emberQunit.test)('study return the capacity', function (assert) {\n    _ember['default'].run.begin();\n\n    var gov = this.store().createRecord('government', { 'name': 'Bachelet-2014-2018' });\n    var estudio = this.store().createRecord('study', { \"version\": \"marzo\", \"year\": \"2016\" });\n    var promesa_1 = this.store().createRecord('promise', { 'content': 'content01', 'number': '1', 'title': 'title01', 'coherenceLevel': 3 });\n    var promesa_2 = this.store().createRecord('promise', { 'content': 'content02', 'number': '2', 'title': 'title02', 'coherenceLevel': 2 });\n    var promesa_3 = this.store().createRecord('promise', { 'content': 'content03', 'number': '3', 'title': 'title03', 'coherenceLevel': 4 });\n    var pl1 = this.store().createRecord('bill', { 'name': 'name01', 'title': 'title01', 'fullfilment': '100%' });\n    var pl2 = this.store().createRecord('bill', { 'name': 'name02', 'title': 'title02', 'fullfilment': '40%' });\n    var pl3 = this.store().createRecord('bill', { 'name': 'name03', 'title': 'title03', 'fullfilment': '100%' });\n\n    gov.get('studies').pushObject(estudio);\n    promesa_1.get('bills').pushObject(pl1);\n    promesa_2.get('bills').pushObject(pl2);\n    promesa_3.get('bills').pushObject(pl3);\n\n    estudio.get('promises').pushObject(promesa_1);\n    estudio.get('promises').pushObject(promesa_2);\n    estudio.get('promises').pushObject(promesa_3);\n\n    assert.equal(estudio.get('capacidad'), 1);\n\n    _ember['default'].run.end();\n  });\n\n  (0, _emberQunit.test)('fullName', function (assert) {\n    _ember['default'].run.begin();\n    var gov = this.store().createRecord('government', { 'name': 'Bachelet-2014-2018' });\n    var estudio = this.store().createRecord('study', { \"version\": \"marzo\", \"year\": \"2016\" });\n    gov.get('studies').pushObject(estudio);\n    _ember['default'].run.end();\n    assert.equal(estudio.get('fullName'), 'marzo 2016');\n  });\n\n  (0, _emberQunit.test)(\"chartData\", function (assert) {\n    _ember['default'].run.begin();\n\n    var gov = this.store().createRecord('government', { 'name': 'Bachelet-2014-2018' });\n    var estudio = this.store().createRecord('study', { \"version\": \"marzo\", \"year\": \"2016\" });\n    var promesa_1 = this.store().createRecord('promise', { 'content': 'content01', 'number': '1', 'title': 'title01', 'coherenceLevel': 3 });\n    var promesa_2 = this.store().createRecord('promise', { 'content': 'content02', 'number': '2', 'title': 'title02', 'coherenceLevel': 2 });\n    var promesa_3 = this.store().createRecord('promise', { 'content': 'content03', 'number': '3', 'title': 'title03', 'coherenceLevel': 4 });\n    var pl1 = this.store().createRecord('bill', { 'name': 'name01', 'title': 'title01', 'fullfilment': '100%' });\n    var pl2 = this.store().createRecord('bill', { 'name': 'name02', 'title': 'title02', 'fullfilment': '40%' });\n    var pl3 = this.store().createRecord('bill', { 'name': 'name03', 'title': 'title03', 'fullfilment': '100%' });\n\n    gov.get('studies').pushObject(estudio);\n    promesa_1.get('bills').pushObject(pl1);\n    promesa_2.get('bills').pushObject(pl2);\n    promesa_3.get('bills').pushObject(pl3);\n\n    estudio.get('promises').pushObject(promesa_1);\n    estudio.get('promises').pushObject(promesa_2);\n    estudio.get('promises').pushObject(promesa_3);\n    _ember['default'].run.end();\n\n    var expected_dataChart = {\n      labels: [\"% avance\", \"% incompleto\"],\n      datasets: [{\n        data: [80, 20],\n        backgroundColor: [\"#FF6384\", \"#36A2EB\"],\n        hoverBackgroundColor: [\"#FF6384\", \"#36A2EB\"]\n      }]\n    };\n    assert.deepEqual(estudio.get('chartData'), expected_dataChart);\n  });\n\n  (0, _emberQunit.test)('get bills', function (assert) {\n    var estudio = this.loadData(this.store()).estudio;\n    assert.ok(estudio.get('bills'), 'bills');\n    assert.equal(estudio.get('bills').length, 4, 'length 4');\n    assert.ok(estudio.get('bills').findBy('id', 'pl1'), 'pl1');\n    assert.ok(estudio.get('bills').findBy('id', 'pl2'), 'pl2');\n    assert.ok(estudio.get('bills').findBy('id', 'pl3'), 'pl3');\n    assert.ok(estudio.get('bills').findBy('id', 'pl4'), 'pl4');\n    assert.notOk(estudio.get('bills').findBy('id', 'pl5'), 'pl5');\n  });\n\n  (0, _emberQunit.test)('getCapacity', function (assert) {\n\n    var estudio = this.loadData(this.store()).estudio;\n    //there are two promises that are completed\n    assert.equal(estudio.get('capacity'), 2);\n  });\n\n  (0, _emberQunit.test)('calc urgencies', function (assert) {\n    var estudio = this.loadData(this.store()).estudio;\n\n    assert.equal(estudio.get('billsCount'), 4);\n    assert.equal(estudio.get('urgenciesCount'), 100);\n  });\n\n  (0, _emberQunit.test)('show promises for a single study', function (assert) {\n    _ember['default'].run.begin();\n    var store = this.store();\n    var gov = store.createRecord('government', { 'name': 'Bachelet-2014-2018' });\n    var estudio_1 = store.createRecord('study', { \"version\": \"marzo\", \"year\": \"2016\" });\n    var estudio_2 = store.createRecord('study', { \"version\": \"mayo\", \"year\": \"2016\" });\n\n    var promesa_1_1 = store.createRecord('promise', { 'content': 'content01', 'number': '1', 'title': 'title01', 'coherenceLevel': 3 });\n    var promesa_1_2 = store.createRecord('promise', { 'content': 'content02', 'number': '2', 'title': 'title02' });\n    var promesa_1_3 = store.createRecord('promise', { 'content': 'content03', 'number': '3', 'title': 'title03' });\n    var promesa_1_4 = store.createRecord('promise', { 'content': 'content04', 'number': '4', 'title': 'title04' });\n\n    var promesa_2_1 = store.createRecord('promise', { 'content': 'content01', 'number': '1', 'title': 'title01', 'coherenceLevel': 3 });\n    var promesa_2_2 = store.createRecord('promise', { 'content': 'content02', 'number': '2', 'title': 'title02' });\n\n    var pl1 = store.createRecord('bill', { 'name': 'name01', 'title': 'title01', 'fullfilment': '100%' });\n    var pl2 = store.createRecord('bill', { 'name': 'name01', 'title': 'title01', 'fullfilment': '100%' });\n\n    var area_1 = store.createRecord('area', { 'id': 1, 'name': 'area 01' });\n    var area_2 = store.createRecord('area', { 'id': 2, 'name': 'area 02' });\n    var area_3 = store.createRecord('area', { 'id': 3, 'name': 'area 03' });\n\n    area_1.get('promises').pushObject(promesa_1_1);\n    area_2.get('promises').pushObject(promesa_1_2);\n    area_3.get('promises').pushObject(promesa_1_3);\n    area_3.get('promises').pushObject(promesa_1_4);\n\n    area_1.get('promises').pushObject(promesa_2_1);\n    area_2.get('promises').pushObject(promesa_2_2);\n\n    promesa_1_1.get('bills').pushObject(pl1);\n    promesa_2_1.get('bills').pushObject(pl2);\n\n    gov.get('studies').pushObject(estudio_1);\n    gov.get('studies').pushObject(estudio_2);\n\n    estudio_1.get('promises').pushObject(promesa_1_1);\n    estudio_1.get('promises').pushObject(promesa_1_2);\n    estudio_1.get('promises').pushObject(promesa_1_3);\n    estudio_1.get('promises').pushObject(promesa_1_4);\n\n    estudio_2.get('promises').pushObject(promesa_2_1);\n    estudio_2.get('promises').pushObject(promesa_2_2);\n    _ember['default'].run.end();\n\n    var areas_1_array = estudio_1.get('areas');\n\n    assert.ok(areas_1_array.filterBy('id', 1), 'kaka');\n    assert.ok(areas_1_array.filterBy('id', 2), 'keke');\n    assert.ok(areas_1_array.filterBy('id', 3), 'kiki');\n\n    assert.equal(areas_1_array.length, 3);\n\n    var areas_2_array = estudio_2.get('areas');\n    assert.ok(areas_2_array.filterBy('id', 1), 'lala');\n    assert.ok(areas_2_array.filterBy('id', 2), 'lele');\n    assert.notOk(areas_2_array.filterBy('id', 3).length, 0);\n\n    assert.equal(areas_2_array.length, 2);\n  });\n\n  (0, _emberQunit.test)('getPromisesByArea', function (assert) {\n    _ember['default'].run.begin();\n    var store = this.store();\n    var gov = store.createRecord('government', { 'name': 'Bachelet-2014-2018' });\n    var estudio_1 = store.createRecord('study', { \"version\": \"marzo\", \"year\": \"2016\", 'gov': gov });\n    var estudio_2 = store.createRecord('study', { \"version\": \"mayo\", \"year\": \"2016\" });\n\n    var promesa_1_1 = store.createRecord('promise', { 'id': 'p1', 'content': 'content01', 'number': '1', 'title': 'title01', 'study': estudio_1 });\n\n    var promesa_1_2 = store.createRecord('promise', { 'id': 'p2', 'content': 'content01', 'number': '1', 'title': 'title01', 'study': estudio_2 });\n\n    var area_1 = store.createRecord('area', { 'id': 1, 'name': 'area 01' });\n\n    area_1.get('promises').pushObject(promesa_1_1);\n    area_1.get('promises').pushObject(promesa_1_2);\n    _ember['default'].run.end();\n    var promises_estudio1 = estudio_1.getPromisesByArea(area_1);\n    assert.equal(promises_estudio1.length, 1);\n    assert.equal(promises_estudio1[0].get('id'), 'p1');\n    var promises_estudio2 = estudio_2.getPromisesByArea(area_1);\n    assert.equal(promises_estudio2.length, 1);\n    assert.equal(promises_estudio2[0].get('id'), 'p2');\n  });\n  (0, _emberQunit.test)('getPromisesGroupedByArea', function (assert) {\n    var estudio = this.loadData(this.store()).estudio;\n    var result = estudio.get('promisesGroupedByArea');\n\n    assert.equal(result[0].area.get('id'), 'a1');\n    assert.equal(result[0].promises.length, 2);\n\n    var p1 = _lodash['default'].find(result[0].promises, function (promise) {\n      return promise.get('id') === '1';\n    });\n    var p2 = _lodash['default'].find(result[0].promises, function (promise) {\n      return promise.get('id') === '2';\n    });\n\n    assert.ok(p1);\n    assert.ok(p2);\n\n    var p3 = _lodash['default'].find(result[1].promises, function (promise) {\n      return promise.get('id') === '3';\n    });\n\n    assert.equal(result[1].area.get('id'), 'a2');\n    assert.equal(result[1].promises.length, 1);\n    assert.ok(p3);\n  });\n  (0, _emberQunit.test)('getFullfilmentByArea', function (assert) {\n    var estudio = this.loadData(this.store()).estudio;\n    var estudio2 = this.loadData(this.store()).estudio2;\n    var result = estudio.get('promisesGroupedByArea');\n    var result2 = estudio2.get('promisesGroupedByArea');\n\n    assert.equal(result[0].summary.completed, 1, 'a1 completed');\n    assert.equal(result[0].summary.in_progress, 1, 'a1 in_progress');\n    assert.equal(result2[1].summary.completed, 0, 'a2 completed');\n    assert.equal(result2[1].summary.in_progress, 0, 'a2 in_progress');\n    assert.equal(result2[1].summary.no_progress, 2, 'a2 no_progress');\n\n    assert.equal(result[0].summary.fullfilment, 60, 'a1 fullfilment');\n    assert.equal(result[1].summary.fullfilment, 100, 'a1 fullfilment');\n    assert.equal(result2[0].summary.fullfilment, 0, 'a1 fullfilment');\n    assert.equal(result2[1].summary.fullfilment, 0, 'a1 fullfilment');\n\n    assert.equal(result[0].summary.coherenceLevel, 3.5, 's1 a1 coherenceLevel');\n    assert.equal(result[1].summary.coherenceLevel, 4, 's1 a2 coherenceLevel');\n    assert.equal(result2[0].summary.coherenceLevel, 1, 's2 a1 coherenceLevel');\n    assert.equal(result2[1].summary.coherenceLevel, 1, 's2 a2 coherenceLevel');\n  });\n});","define('ddah-ember/tests/unit/models/study-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/study-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/study-test.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/unit/routes/about-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:about', 'Unit | Route | about', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ddah-ember/tests/unit/routes/about-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/about-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/about-test.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/unit/routes/application-test', ['exports', 'ember-qunit', 'ember-data', 'ember', 'lodash'], function (exports, _emberQunit, _emberData, _ember, _lodash) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    needs: ['model:bill', 'model:promise', 'model:study', 'model:government', 'model:area', 'model:phase', 'model:priority', 'model:justification'],\n    beforeEach: function beforeEach() {\n      this.inject.service('store');\n    }\n  });\n\n  (0, _emberQunit.test)(\"automatically loads data\", function (assert) {\n    var done = assert.async();\n    var store = this.store;\n\n    var assertions = function assertions() {\n      this.subject().parseCsv(\"test/Bachelet-2014-2018_Marzo-2016.csv\").then(function () {\n        var bills = store.peekAll('bill');\n        assert.ok(bills.toArray().length === 7, \"Hay 7 bills:\" + bills.toArray().length);\n        var promises = store.peekAll('promise');\n        assert.equal(promises.toArray().length, 26);\n        done();\n      });\n    };\n\n    _ember['default'].run.bind(this, assertions)();\n  });\n\n  (0, _emberQunit.test)(\"bill has promise, priority and phase\", function (assert) {\n    var done = assert.async();\n    var store = this.store;\n\n    var assertions = function assertions() {\n\n      this.subject().parseCsv(\"test/Bachelet-2014-2018_Marzo-2016.csv\").then(function () {\n\n        var expected_promise = store.peekRecord('promise', \"26\");\n        var bill = store.peekRecord('bill', \"906907\");\n        assert.equal(bill.get('promises').toArray()[0].get('id'), expected_promise.id);\n        assert.equal(bill.get('phase').get('name'), \"Promulgado\");\n        assert.ok(bill.get('priorities').toArray()[0].toJSON().name, \"Priority has name:\" + bill.get('priorities').toArray()[0].toJSON().name);\n        assert.equal(bill.get('priorities').findBy('name', 'Inmediata').get('count'), 3);\n        assert.equal(bill.get('priorities').findBy('name', 'Suma').get('count'), 2);\n        assert.equal(bill.get('priorities').findBy('name', 'Simple').get('count'), 1);\n        done();\n      });\n    };\n\n    _ember['default'].run.bind(this, assertions)();\n  });\n\n  (0, _emberQunit.test)(\"promise has many bills and an area\", function (assert) {\n    var done = assert.async();\n    var store = this.store;\n    _ember['default'].run.begin();\n    var estudio = store.createRecord('study', { \"version\": \"marzo\", \"year\": \"2016\", \"id\": 1234 });\n    _ember['default'].run.end();\n\n    var assertions = function assertions() {\n      this.subject()._parseCsv(\"/studies/test/Bachelet-2014-2018_Marzo-2016.csv\", store, estudio).then(function () {\n        var expected_promise = store.peekAll('promise').toArray().findBy('number', 26);\n        var bill = store.peekAll('bill').toArray().findBy('name', '9069-07');\n        var bill2 = store.peekAll('bill').toArray().findBy('name', '10344-06');\n        assert.equal(bill.get('promises').toArray()[0].get('id'), expected_promise.id);\n        assert.equal(bill2.get('promises').toArray()[0].get('id'), expected_promise.id);\n        var promises = store.peekAll('promise');\n        assert.equal(promises.toArray().length, 26);\n        assert.equal(expected_promise.get('area').get('name'), \"Democracia\");\n        var bills = store.peekAll('bill');\n        assert.equal(bills.toArray().length, 7);\n        var priorities = store.peekAll('priority');\n        assert.equal(priorities.toArray().length, 21);\n        assert.equal(estudio.get('urgenciesCount'), 42);\n        done();\n      });\n    };\n\n    _ember['default'].run.bind(this, assertions)();\n  });\n\n  (0, _emberQunit.test)(\"BUG with coherence returning NaN\", function (assert) {\n    var done = assert.async();\n    var store = this.store;\n    _ember['default'].run.begin();\n    var estudio = store.createRecord('study', { \"version\": \"marzo\", \"year\": \"2016\", \"id\": 1234 });\n    _ember['default'].run.end();\n\n    var assertions = function assertions() {\n      this.subject()._parseCsv(\"/studies/test/Bachelet-2014-2018_Marzo-2016.csv\", store, estudio).then(function () {\n        var promise = store.peekAll('promise').toArray().findBy('number', 26);\n        assert.ok(promise.get('study').get('coherenceLevel'));\n        done();\n      });\n    };\n\n    _ember['default'].run.bind(this, assertions)();\n  });\n\n  (0, _emberQunit.test)(\"bills belong to more than one promise\", function (assert) {\n    var done = assert.async();\n    var store = this.store;\n    _ember['default'].run.begin();\n    var estudio = store.createRecord('study', { \"version\": \"marzo\", \"year\": \"2016\", \"id\": 1234 });\n    _ember['default'].run.end();\n\n    var assertions = function assertions() {\n      this.subject()._parseCsv(\"/studies/test/Bachelet-2014-2018_Marzo-2016.csv\", store, estudio).then(function () {\n        var bill = store.peekRecord('bill', 1736333047);\n        assert.equal(bill.get('promises').toArray().length, 2);\n        assert.equal(bill.get('priorities').toArray().length, 3);\n        done();\n      });\n    };\n\n    _ember['default'].run.bind(this, assertions)();\n  });\n\n  (0, _emberQunit.test)('matches csv with model attributes', function (assert) {\n    var route = this.subject();\n\n    var row_from_csv = {\n      \"id\": \"1\",\n      \"Ano\": \"2016\",\n      \"Version\": \"mayo\",\n      \"area\": \"Democracia\",\n      \"promesa\": 'Hola esto es una promesa',\n      \"avance_total\": \"40%\",\n      \"coherencia\": \"4\",\n      \"boletin\": \"10344-06\",\n      \"titulo_proyecto\": \"Regula el ejercicio del sufragio de los ciudadanos que se encuentran fuera del país.\",\n      \"link\": \"http://www.senado.cl/appsenado/templates/tramitacion/index.php\",\n      \"PrimerTramite\": \"1\",\n      \"Veto\": \"\",\n      \"Insistencia\": \"\",\n      \"SegundoTercerTramite\": \"\",\n      \"ComisionMixta\": \"\",\n      \"TribunalConstitucional\": \"\",\n      \"AprobacionPresidencial\": \"\",\n      \"Promulgado\": \"\",\n      \"RechazadoRetirado\": \"\",\n      \"Avance\": \"0,4\",\n      \"Simple\": \"1\",\n      \"Suma\": \"\",\n      \"Inmediata\": \"\",\n      \"Total\": \"1\",\n      \"Marginal\": \"\",\n      \"ParcialMinima\": \"\",\n      \"ParcialAlto\": \"\",\n      \"EscalaCoherencia\": \"4\",\n      \"justificacion_avance\": \"Esto es un perrito\"\n    };\n\n    var resulting_data = route._parseAttributes(row_from_csv);\n    var parsed_promise = _lodash['default'].find(resulting_data, { type: 'promise' });\n    assert.equal(parsed_promise.id, 1);\n    assert.equal(parsed_promise.attributes.content, 'Hola esto es una promesa');\n\n    var parsed_bill = _lodash['default'].find(resulting_data, { type: 'bill' });\n    assert.equal(parsed_bill.id, 1034406);\n    assert.equal(parsed_bill.attributes.name, \"10344-06\");\n\n    var simple = _lodash['default'].find(parsed_bill.relationships.priorities.data, { 'id': route._hashCode(parsed_bill.id + \"Simple\") });\n    assert.ok(simple.type);\n\n    var parsed_just = _lodash['default'].find(resulting_data, { type: 'justification' });\n    assert.ok(parsed_just.id);\n    assert.equal(parsed_just.relationships.promise.data.id, 1);\n    assert.equal(parsed_just.relationships.promise.data.type, 'promise');\n    assert.equal(parsed_just.relationships.bill.data.id, parsed_bill.id);\n    assert.equal(parsed_just.relationships.bill.data.type, 'bill');\n    assert.equal(parsed_just.attributes.justification, \"Esto es un perrito\");\n    //assert.equal(parsed_bill.relationships.promises.data[0].id, parsed_promise.id);\n    //assert.equal(parsed_bill.relationships.promises.data[0].type, 'promise');\n  });\n  (0, _emberQunit.test)('doesnt return anything', function (assert) {\n    var route = this.subject();\n\n    var row_from_csv = {\n      \"id\": \"\",\n      \"Ano\": \"\",\n      \"Version\": \"\",\n      \"area\": \"\",\n      \"promesa\": '',\n      \"avance_total\": \"\",\n      \"coherencia\": \"\",\n      \"boletin\": \"\",\n      \"titulo_proyecto\": \"perrito\",\n      \"link\": \"\",\n      \"PrimerTramite\": \"\",\n      \"Veto\": \"\",\n      \"Insistencia\": \"\",\n      \"SegundoTercerTramite\": \"\",\n      \"ComisionMixta\": \"\",\n      \"TribunalConstitucional\": \"\",\n      \"AprobacionPresidencial\": \"\",\n      \"Promulgado\": \"\",\n      \"RechazadoRetirado\": \"\",\n      \"Avance\": \"\",\n      \"Simple\": \"\",\n      \"Suma\": \"\",\n      \"Inmediata\": \"\",\n      \"Total\": \"\",\n      \"Marginal\": \"\",\n      \"ParcialMinima\": \"\",\n      \"ParcialAlto\": \"\",\n      \"EscalaCoherencia\": \"\",\n      \"justificacion_avance\": \"\"\n    };\n\n    var resulting_data = route._parseAttributes(row_from_csv);\n    assert.notOk(resulting_data.length);\n  });\n\n  (0, _emberQunit.test)(\"it has studies and government\", function (assert) {\n    var route = this.subject();\n    var store = this.store;\n    route._parseStudiesGovernment(store);\n    var studies = store.peekAll('study');\n    assert.ok(studies.toArray().length > 0);\n    var gov = store.peekAll('government');\n    assert.ok(gov.toArray().length > 0);\n    assert.ok(gov.toArray()[0].get('id'), 'Gobierno tiene id');\n\n    var idGov = route._hashCode('Bachelet-2014-2018');\n    assert.ok(studies.toArray()[0].get('government'));\n    assert.equal(idGov, studies.toArray()[0].get('government').get('id'));\n\n    assert.ok(studies.toArray()[0].get('id'), 'Estudio tiene id');\n  });\n  (0, _emberQunit.test)('creates id even if where to get id from', function (assert) {\n    var route = this.subject();\n\n    var row_from_csv = {\n      \"id\": \"1\",\n      \"Ano\": \"2016\",\n      \"Version\": \"mayo\",\n      \"area\": \"Democracia\",\n      \"promesa\": 'Hola esto es una promesa',\n      \"avance_total\": \"40%\",\n      \"coherencia\": \"4\",\n      \"boletin\": \"10344-06\",\n      \"titulo_proyecto\": \"Regula el ejercicio del sufragio de los ciudadanos que se encuentran fuera del país.\",\n      \"link\": \"http://www.senado.cl/appsenado/templates/tramitacion/index.php\",\n      \"PrimerTramite\": \"1\",\n      \"Veto\": \"\",\n      \"Insistencia\": \"\",\n      \"SegundoTercerTramite\": \"\",\n      \"ComisionMixta\": \"\",\n      \"TribunalConstitucional\": \"\",\n      \"AprobacionPresidencial\": \"\",\n      \"Promulgado\": \"\",\n      \"RechazadoRetirado\": \"\",\n      \"Avance\": \"0,4\",\n      \"Simple\": \"1\",\n      \"Suma\": \"\",\n      \"Inmediata\": \"\",\n      \"Total\": \"1\",\n      \"Marginal\": \"\",\n      \"ParcialMinima\": \"\",\n      \"ParcialAlto\": \"\",\n      \"EscalaCoherencia\": \"4\",\n      // Justificacion debería ser justificacion_avance (no justificacion) y\n      // aún así debería crear un id!\n      \"justificacion\": \"Esto es un perrito\"\n    };\n    var resulting_data = route._parseAttributes(row_from_csv);\n\n    var parsed_just = _lodash['default'].find(resulting_data, { type: 'justification' });\n    assert.ok(parsed_just.id);\n  });\n  (0, _emberQunit.test)('if there is a bill but no justification_explanation create one anyways', function (assert) {\n\n    var route = this.subject();\n\n    var row_from_csv = {\n      \"id\": \"1\",\n      \"Ano\": \"2016\",\n      \"Version\": \"mayo\",\n      \"area\": \"Democracia\",\n      \"promesa\": 'Hola esto es una promesa',\n      \"avance_total\": \"40%\",\n      \"coherencia\": \"4\",\n      \"boletin\": \"10344-06\",\n      \"titulo_proyecto\": \"Regula el ejercicio del sufragio de los ciudadanos que se encuentran fuera del país.\",\n      \"link\": \"http://www.senado.cl/appsenado/templates/tramitacion/index.php\",\n      \"PrimerTramite\": \"1\",\n      \"Veto\": \"\",\n      \"Insistencia\": \"\",\n      \"SegundoTercerTramite\": \"\",\n      \"ComisionMixta\": \"\",\n      \"TribunalConstitucional\": \"\",\n      \"AprobacionPresidencial\": \"\",\n      \"Promulgado\": \"\",\n      \"RechazadoRetirado\": \"\",\n      \"Avance\": \"0,4\",\n      \"Simple\": \"1\",\n      \"Suma\": \"\",\n      \"Inmediata\": \"\",\n      \"Total\": \"1\",\n      \"Marginal\": \"\",\n      \"ParcialMinima\": \"\",\n      \"ParcialAlto\": \"\",\n      \"EscalaCoherencia\": \"4\",\n      // Justificacion está vacía y debería crear una justificación\n      \"justificacion_avance\": \"\"\n    };\n    var resulting_data = route._parseAttributes(row_from_csv);\n\n    var parsed_just = _lodash['default'].find(resulting_data, { type: 'justification' });\n    assert.ok(parsed_just.id);\n  });\n  (0, _emberQunit.test)('if there is no bill then no justification either', function (assert) {\n    var route = this.subject();\n\n    var row_from_csv = {\n      \"id\": \"1\",\n      \"Ano\": \"2016\",\n      \"Version\": \"mayo\",\n      \"area\": \"Democracia\",\n      \"promesa\": 'Hola esto es una promesa',\n      \"avance_total\": \"40%\",\n      \"coherencia\": \"4\",\n      \"boletin\": \"\",\n      \"titulo_proyecto\": \"Regula el ejercicio del sufragio de los ciudadanos que se encuentran fuera del país.\",\n      \"link\": \"http://www.senado.cl/appsenado/templates/tramitacion/index.php\",\n      \"PrimerTramite\": \"1\",\n      \"Veto\": \"\",\n      \"Insistencia\": \"\",\n      \"SegundoTercerTramite\": \"\",\n      \"ComisionMixta\": \"\",\n      \"TribunalConstitucional\": \"\",\n      \"AprobacionPresidencial\": \"\",\n      \"Promulgado\": \"\",\n      \"RechazadoRetirado\": \"\",\n      \"Avance\": \"0,4\",\n      \"Simple\": \"1\",\n      \"Suma\": \"\",\n      \"Inmediata\": \"\",\n      \"Total\": \"1\",\n      \"Marginal\": \"\",\n      \"ParcialMinima\": \"\",\n      \"ParcialAlto\": \"\",\n      \"EscalaCoherencia\": \"4\",\n      // Justificacion debería ser justificacion_avance (no justificacion) y\n      // aún así debería crear un id!\n      \"justificacion\": \"Esto es un perrito\"\n    };\n    var resulting_data = route._parseAttributes(row_from_csv);\n\n    var parsed_just = _lodash['default'].find(resulting_data, { type: 'justification' });\n    assert.notOk(parsed_just);\n  });\n\n  (0, _emberQunit.test)(\"it has phases with fullfilment\", function (assert) {\n    var route = this.subject();\n    var store = this.store;\n    route._uploadPhases(store);\n    var phases = store.peekAll('phase');\n    assert.ok(phases.toArray().length > 0);\n  });\n\n  (0, _emberQunit.test)(\"model return government\", function (assert) {\n    var gov = this.subject().model();\n    assert.ok(gov.toArray().length > 0);\n  });\n\n  (0, _emberQunit.test)(\"_arrayparseCsv\", function (assert) {\n    assert.expect(2);\n    var store = this.store;\n    var config_studies = [\"Bachelet-2014-2018_Marzo-2015\", \"Bachelet-2014-2018_Marzo-2016\"];\n    this.subject()._parseStudiesGovernment(store, config_studies);\n    return this.subject()._arrayparseCsv([\"/studies/test/Bachelet-2014-2018_Marzo-2015.csv\", \"/studies/test/Bachelet-2014-2018_Marzo-2016.csv\"], store).then(function (studies) {\n      assert.ok(studies.toArray()[0].get('promises').toArray().length > 0);\n      assert.ok(studies.toArray()[1].get('promises').toArray().length > 0);\n    });\n  });\n\n  (0, _emberQunit.test)(\"parses a single area\", function (assert) {\n    assert.expect(1);\n    var store = this.store;\n\n    var config_studies = [\"Bachelet-2014-2018_Marzo-2015\", \"Bachelet-2014-2018_Marzo-2016\"];\n    this.subject()._parseStudiesGovernment(store, config_studies);\n\n    var assertions = function assertions() {\n      var runner = function runner() {\n        var areas = store.peekAll('area').toArray().filterBy('name', \"Agricultura\");\n        assert.equal(areas.length, 1);\n      };\n      var bound_runner = _ember['default'].run.bind(this, runner);\n      this.subject()._arrayparseCsv([\"/studies/test/Bachelet-2014-2018_Marzo-2015.csv\", \"/studies/test/Bachelet-2014-2018_Marzo-2016.csv\"], store).then(bound_runner);\n    };\n\n    _ember['default'].run.bind(this, assertions)();\n  });\n});","define('ddah-ember/tests/unit/routes/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/unit/routes/compare-studies-test', ['exports', 'ember-qunit', 'ember', 'ddah-ember/mixins/utilities'], function (exports, _emberQunit, _ember, _ddahEmberMixinsUtilities) {\n\n  (0, _emberQunit.moduleFor)('route:compare-studies', 'Unit | Route | compare studies', {\n    // Specify the other units that are required for this test.\n\n    needs: ['model:government', 'model:study', 'model:promise', 'model:area', 'model:priority', 'model:bill', 'model:phase', 'model:justification']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  (0, _emberQunit.test)(\"returns studies based on URL\", function (assert) {\n    var route = this.subject();\n    var UtilitiesObject = _ember['default'].Object.extend(_ddahEmberMixinsUtilities['default']);\n    var subject = UtilitiesObject.create();\n    var params = {\n      studies: \"bachelet-2014-2018_marzo-2016~bachelet-2014-2018_marzo-2015\"\n    };\n\n    _ember['default'].run.begin();\n    var govB = route.get(\"store\").createRecord(\"government\", { \"name\": \"Bachelet-2014-2018\" });\n    route.get(\"store\").createRecord(\"study\", { \"id\": subject._hashCode(\"Marzo\" + \"2016\"), \"version\": \"Marzo\", \"year\": 2016, \"government\": govB });\n    route.get(\"store\").createRecord(\"study\", { \"id\": subject._hashCode(\"Marzo\" + \"2015\"), \"version\": \"Marzo\", \"year\": 2015, \"government\": govB });\n\n    route.model(params).then(function (studies) {\n      assert.ok(studies.get('firstObject').get('promises').toArray().length > 0);\n    });\n\n    _ember['default'].run.end();\n  });\n});","define('ddah-ember/tests/unit/routes/compare-studies-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/compare-studies-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/compare-studies-test.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/unit/routes/government-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:government', 'Unit | Route | government', {\n    // Specify the other units that are required for this test.\n    needs: ['model:government', 'model:justification']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  (0, _emberQunit.test)('it has gov model', function (assert) {\n    var route = this.subject();\n    var govs = route.model();\n    assert.ok(govs);\n  });\n});","define('ddah-ember/tests/unit/routes/government-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/government-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/government-test.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ddah-ember/tests/unit/routes/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/unit/routes/methodology-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:methodology', 'Unit | Route | methodology', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ddah-ember/tests/unit/routes/methodology-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/methodology-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/methodology-test.js should pass jshint.');\n  });\n});","define('ddah-ember/tests/unit/routes/study-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n\n  (0, _emberQunit.moduleFor)('route:study', 'Unit | Route | study', {\n    // Specify the other units that are required for this test.\n    needs: ['route:application', 'model:study', \"model:promise\", \"model:government\", \"model:phase\", \"model:bill\", \"model:area\", \"model:priority\", 'model:justification'],\n    beforeEach: function beforeEach() {\n      this.inject.service('store');\n    }\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  (0, _emberQunit.test)(\"returns one study based on URL\", function (assert) {\n    assert.expect(1);\n    var route = this.subject();\n    var params = {\n      study_name: \"bachelet-2014-2018_marzo-2016\"\n    };\n    _ember['default'].run.begin();\n    route._parseStudiesGovernment(this.store);\n    _ember['default'].run.end();\n    return route.model(params).then(function (study) {\n      assert.equal(study.get('version'), \"Marzo\");\n    });\n  });\n\n  (0, _emberQunit.test)(\"study exists and has promises\", function (assert) {\n    assert.expect(1);\n    var route = this.subject();\n    _ember['default'].run.begin();\n    var gov = route.get(\"store\").createRecord(\"government\", { \"name\": \"Bachelet-2014-2018\" });\n    route.get(\"store\").createRecord(\"study\", { \"version\": \"Marzo\", \"year\": 2016, \"government\": gov, \"id\": 1 });\n    _ember['default'].run.end();\n    var params = {\n      study_name: \"bachelet-2014-2018_marzo-2016\"\n    };\n    return route.model(params).then(function (study) {\n      var st = study.get('promises').toArray();\n      assert.ok(st.length > 0, \"Testeando si estudio tiene promesas\");\n    });\n  });\n});","define('ddah-ember/tests/unit/routes/study-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/study-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/study-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('ddah-ember/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvxxYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}